pipeline {
    agent any
    tools {
        jdk 'jdk17'
        // Uncomment this if you need Node.js
        // nodejs 'node16'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/MohamedMagdy840/tetris-game.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=tetris \
                    -Dsonar.projectKey=tetris'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

//        stage('OWASP FS SCAN') {
//            steps {
//                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
//                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
//            }
//        }

        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('Docker Operations') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        '''
                    }

                    // Build Docker image
                    sh 'docker build -t tetris .'

                    // Tag Docker image with a new tag
                    sh 'docker tag tetris mohamedmagdy840/tetris:latest'

                    // Push Docker image to Docker Hub
                    sh 'docker push mohamedmagdy840/tetris:latest'
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image mohamedmagdy840/tetris:latest > trivyimage.txt'
            }
        }

        stage('Checkout Deployment File') {
            steps {
                git branch: 'main', url: 'https://github.com/MohamedMagdy840/tetris-deployment-file.git'
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_USER_NAME = "MohamedMagdy840"
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'git-token', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            # Update the local deployment file
                            git config user.email "jenkins@gmail.com"
                            git config user.name "jenkins"
                            sed -i 's|image: .*|image: mohamedmagdy840/tetris:latest|' deployment-service.yaml
                            
                            # Pull latest changes from the remote repository
                            git pull origin main

                            # Configure Git remote to use credentials for pushing
                            git remote set-url origin https://MohamedMagdy840:$GITHUB_TOKEN@github.com/MohamedMagdy840/tetris-deployment-file.git
                            git add deployment-service.yaml
                            git commit -m 'Update deployment image to version mohamedmagdy840/tetris:latest'
                            git push origin HEAD:main

                        '''
                    }
                }
            }
        }
    }
}
